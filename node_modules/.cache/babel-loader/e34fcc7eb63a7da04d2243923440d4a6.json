{"ast":null,"code":"// makeObservable can be used to trap exsisting object properties and make them observable \n// makeObservable(target, annotations , otpions) any js object can be target \n// is used in constructor of class, first argument is this \nimport { action, computed, makeObservable, observable } from \"mobx\";\n\nclass CounterMakeObservable {\n  // state variable\n  constructor() {\n    this.count = 0;\n    makeObservable(this, {\n      count: observable,\n      // this is to specify we are now watching count for any changes in its state\n      increment: action,\n      // only actions in mobx can change state of the count or any state variable\n      double: computed // value from getter mostly or simple computed value after a state change \n\n    });\n  }\n\n  get double() {\n    return this.count * 2;\n  }\n\n  increment() {\n    this.count = this.count + 1;\n  }\n\n}\n\nexport default CounterMakeObservable;","map":{"version":3,"sources":["E:/Mobx_Example/mobxdemo/src/Stores/makeObservable_Store.js"],"names":["action","computed","makeObservable","observable","CounterMakeObservable","constructor","count","increment","double"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,MAA7D;;AAEA,MAAMC,qBAAN,CAA4B;AACd;AAEVC,EAAAA,WAAW,GAAG;AAAA,SAFdC,KAEc,GAFL,CAEK;AACVJ,IAAAA,cAAc,CAAC,IAAD,EAAM;AAChBI,MAAAA,KAAK,EAAGH,UADQ;AACI;AACpBI,MAAAA,SAAS,EAAGP,MAFI;AAEI;AACpBQ,MAAAA,MAAM,EAAGP,QAHO,CAGE;;AAHF,KAAN,CAAd;AAKH;;AAES,MAANO,MAAM,GAAG;AACT,WAAO,KAAKF,KAAL,GAAY,CAAnB;AACH;;AAEDC,EAAAA,SAAS,GAAI;AACT,SAAKD,KAAL,GAAa,KAAKA,KAAL,GAAY,CAAzB;AACH;;AAjBuB;;AAoB5B,eAAeF,qBAAf","sourcesContent":["// makeObservable can be used to trap exsisting object properties and make them observable \r\n// makeObservable(target, annotations , otpions) any js object can be target \r\n// is used in constructor of class, first argument is this \r\n\r\nimport { action, computed, makeObservable, observable } from \"mobx\"\r\n\r\nclass CounterMakeObservable {\r\n    count  = 0// state variable\r\n\r\n    constructor() {\r\n        makeObservable(this,{\r\n            count : observable, // this is to specify we are now watching count for any changes in its state\r\n            increment : action, // only actions in mobx can change state of the count or any state variable\r\n            double : computed // value from getter mostly or simple computed value after a state change \r\n        })\r\n    }\r\n\r\n    get double() {\r\n        return this.count *2\r\n    }\r\n\r\n    increment () {\r\n        this.count = this.count +1\r\n    }\r\n}\r\n\r\nexport default CounterMakeObservable;"]},"metadata":{},"sourceType":"module"}