{"ast":null,"code":"import { makeAutoObservable, observable, observe } from \"mobx\";\n\nclass NiftyDerivative {\n  // Domain object 2 \n  // in this object which is basically a class whose instance is returned in main store that is stock.\n  // here we can isolate our logic to buy a nifty derivative which is also part of a stock but it is one \n  // of its kind of stock so we have created this domain object to take care of the nifty derivative buying logic here and forward to general \n  // stock buying method in main store after preprocessing in this class buy method.\n  constructor(store) {\n    this.working = \"\";\n    // as we have passed this as reference in argument in \n    // main store here we are using store as refernce to main store which will have main core methods\n    makeAutoObservable(this, {\n      working: observable\n    });\n    this.store = store;\n  }\n\n  buyDerivative(data) {\n    let obj = {\n      nameOfStock: data.nameOfStock,\n      quantity: data.quantity,\n      stockType: \"Derivative\",\n      index: \"Nifty\"\n    };\n    this.store.buyStock(obj, \"Shravan\"); // the above line comunicated with main core buy method of stock after pre processing\n  }\n\n}\n\nexport default NiftyDerivative;","map":{"version":3,"sources":["E:/Mobx_Example/mobxdemo/src/StoreMangement/NiftyDerivatives.js"],"names":["makeAutoObservable","observable","observe","NiftyDerivative","constructor","store","working","buyDerivative","data","obj","nameOfStock","quantity","stockType","index","buyStock"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,UAA7B,EAAyCC,OAAzC,QAAwD,MAAxD;;AAEA,MAAMC,eAAN,CAAsB;AAAE;AACpB;AACA;AACA;AACA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAA,SADnBC,OACmB,GADT,EACS;AAAE;AACjB;AACAN,IAAAA,kBAAkB,CAAC,IAAD,EAAM;AAACM,MAAAA,OAAO,EAAGL;AAAX,KAAN,CAAlB;AACA,SAAKI,KAAL,GAAWA,KAAX;AACH;;AAEDE,EAAAA,aAAa,CAACC,IAAD,EAAO;AAChB,QAAIC,GAAG,GAAG;AACNC,MAAAA,WAAW,EAAGF,IAAI,CAACE,WADb;AAENC,MAAAA,QAAQ,EAAGH,IAAI,CAACG,QAFV;AAGNC,MAAAA,SAAS,EAAG,YAHN;AAINC,MAAAA,KAAK,EAAG;AAJF,KAAV;AAMA,SAAKR,KAAL,CAAWS,QAAX,CAAoBL,GAApB,EAAwB,SAAxB,EAPgB,CAQhB;AAEH;;AAtBiB;;AAyBtB,eAAeN,eAAf","sourcesContent":["import { makeAutoObservable, observable, observe } from \"mobx\"\r\n\r\nclass NiftyDerivative { // Domain object 2 \r\n    // in this object which is basically a class whose instance is returned in main store that is stock.\r\n    // here we can isolate our logic to buy a nifty derivative which is also part of a stock but it is one \r\n    // of its kind of stock so we have created this domain object to take care of the nifty derivative buying logic here and forward to general \r\n    // stock buying method in main store after preprocessing in this class buy method.\r\n    working = \"\"\r\n    constructor(store) { // as we have passed this as reference in argument in \r\n        // main store here we are using store as refernce to main store which will have main core methods\r\n        makeAutoObservable(this,{working : observable})\r\n        this.store=store \r\n    }\r\n\r\n    buyDerivative(data) {\r\n        let obj = {\r\n            nameOfStock : data.nameOfStock,\r\n            quantity : data.quantity,\r\n            stockType : \"Derivative\",\r\n            index : \"Nifty\"\r\n        }\r\n        this.store.buyStock(obj,\"Shravan\")\r\n        // the above line comunicated with main core buy method of stock after pre processing\r\n\r\n    }\r\n}\r\n\r\nexport default NiftyDerivative;"]},"metadata":{},"sourceType":"module"}