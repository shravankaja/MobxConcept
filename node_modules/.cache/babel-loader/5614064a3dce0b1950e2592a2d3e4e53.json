{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mobx_Example\\\\mobxdemo\\\\src\\\\Components\\\\Reactions.jsx\",\n    _s = $RefreshSig$();\n\nimport { action, autorun } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport '../CSS/main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Reaction({\n  store\n}) {\n  _s();\n\n  //     During the execution of the provided function, MobX keeps track of all observable and computed values that are directly or indirectly read by the effect. Once the function finishes, MobX will collect and subscribe to all observables that were read and wait until any of them changes again. Once they do, the autorun will trigger again, repeating the entire process.\n  React.useEffect(() => {\n    if (store.msg == \"Deposited\") {\n      setTimeout(() => {\n        action(() => {\n          console.log(\"executiong \");\n          store.msg = \" \";\n        });\n      }, 2000);\n    }\n  });\n  autorun(() => {\n    if (store.bankBalance > 0) {\n      store.msg = \"Deposited\";\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"example\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: store.bankBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => store.depositBalance(100),\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: store.msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Reaction, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Reaction;\nexport default _c2 = observer(Reaction);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Reaction\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Mobx_Example/mobxdemo/src/Components/Reactions.jsx"],"names":["action","autorun","observer","React","Reaction","store","useEffect","msg","setTimeout","console","log","bankBalance","depositBalance"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA2B;AAAA;;AAEvB;AAEAF,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAI;AAEhB,QAAGD,KAAK,CAACE,GAAN,IAAa,WAAhB,EAA6B;AACzBC,MAAAA,UAAU,CAAC,MAAM;AAEbR,QAAAA,MAAM,CAAC,MAAM;AACTS,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACJL,UAAAA,KAAK,CAACE,GAAN,GAAY,GAAZ;AACC,SAHK,CAAN;AAKH,OAPS,EAOR,IAPQ,CAAV;AAQH;AACJ,GAZD;AAcAN,EAAAA,OAAO,CAAC,MAAM;AACX,QAAGI,KAAK,CAACM,WAAN,GAAoB,CAAvB,EAA0B;AACtBN,MAAAA,KAAK,CAACE,GAAN,GAAY,WAAZ;AAEH;AAEH,GANM,CAAP;AASA,sBACI;AAAA,2BACA;AAAK,MAAA,KAAK,EAAG,SAAb;AAAA,8BACI;AAAA,kBAAMF,KAAK,CAACM;AAAZ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAG,MAAMN,KAAK,CAACO,cAAN,CAAqB,GAArB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGC;AAAA,kBAAMP,KAAK,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AASH;;GApCQH,Q;;KAAAA,Q;AAsCT,qBAAeF,QAAQ,CAACE,QAAD,CAAvB","sourcesContent":["import { action, autorun } from 'mobx'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport '../CSS/main.css'\r\n\r\nfunction Reaction({store}) {\r\n    \r\n    //     During the execution of the provided function, MobX keeps track of all observable and computed values that are directly or indirectly read by the effect. Once the function finishes, MobX will collect and subscribe to all observables that were read and wait until any of them changes again. Once they do, the autorun will trigger again, repeating the entire process.\r\n\r\n    React.useEffect(()=>{\r\n\r\n        if(store.msg == \"Deposited\") {\r\n            setTimeout(() => {\r\n\r\n                action(() => { \r\n                    console.log(\"executiong \") \r\n                store.msg = \" \" \r\n                }) \r\n               \r\n            },2000)\r\n        }\r\n    })\r\n\r\n    autorun(() => {\r\n       if(store.bankBalance > 0) {\r\n           store.msg = \"Deposited\"\r\n           \r\n       }\r\n        \r\n    })\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <div class = \"example\">\r\n            <div>{store.bankBalance}</div>\r\n            <button onClick= {() => store.depositBalance(100)}>Deposit</button>\r\n         <div>{store.msg}</div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(Reaction)"]},"metadata":{},"sourceType":"module"}