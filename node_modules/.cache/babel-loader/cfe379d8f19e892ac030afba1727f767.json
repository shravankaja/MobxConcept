{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport Nifty50Options from \"./Nifty50\";\nimport NiftyDerivative from '../StoreMangement/NiftyDerivatives';\n\nclass StockStore {\n  // this is our domain store which have the main core interaction either with api or any other \n  // transport layer. this class should be testable and can also run on backend and can be resused on any other frontend as well\n  constructor() {\n    this.stocks = [{\n      nameOfStock: \"INFY\",\n      index: \"Nifty50\",\n      quantity: 1500\n    }, {\n      nameOfStock: \"United\",\n      index: \"Nifty200\",\n      quantity: 336\n    }];\n    this.buyers = [];\n    makeAutoObservable(this);\n  }\n\n  addStock(data) {\n    this.stocks.push(data);\n  }\n\n  buyNifty50Options() {\n    // by this method we create a domain object which can be passed over th whole application intead of \n    // of our original store. Here Nifty50Options is the domain object(which is a class) it has it own methods and properties.\n    // But we can isolate a partiular context of the main store. Instead of putting whole logic in the store itself. Here we are \n    // returning an object nifty50 which can be passed to a component to which it can be used.\n    const nifty50 = new Nifty50Options(this);\n    return nifty50;\n  }\n\n  buyNiftyDerivative() {\n    //same as the above methods.\n    const niftyDerivative = new NiftyDerivative(this);\n    this.buyHandlers = [];\n    return niftyDerivative;\n  }\n\n  buyStock(data, name) {\n    //this is the one of the core method of the store which is called by domain objects to interact with api,\n    // transport lay or update any local observable related to stock domain in our case\n    data.buyer = name;\n    this.buyers.push(data);\n    this.changeQuantity(data);\n    console.log(this.stocks);\n    console.log(this.buyers);\n  }\n\n  changeQuantity(data) {\n    this.stocks.forEach(objData => {\n      if (objData.nameOfStock == data.nameOfStock) {\n        objData.quantity = objData.quantity - data.quantity;\n      }\n    });\n  }\n\n}\n\nexport default StockStore;","map":{"version":3,"sources":["E:/Mobx_Example/mobxdemo/src/StoreMangement/StockStore.js"],"names":["makeAutoObservable","Nifty50Options","NiftyDerivative","StockStore","constructor","stocks","nameOfStock","index","quantity","buyers","addStock","data","push","buyNifty50Options","nifty50","buyNiftyDerivative","niftyDerivative","buyHandlers","buyStock","name","buyer","changeQuantity","console","log","forEach","objData"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;AAEA,MAAMC,UAAN,CAAiB;AAAE;AACf;AAKCC,EAAAA,WAAW,GAAG;AAAA,SAJdC,MAIc,GAJL,CAAC;AAACC,MAAAA,WAAW,EAAG,MAAf;AAAwBC,MAAAA,KAAK,EAAG,SAAhC;AAA2CC,MAAAA,QAAQ,EAAG;AAAtD,KAAD,EAA8D;AAACF,MAAAA,WAAW,EAAG,QAAf;AAA0BC,MAAAA,KAAK,EAAG,UAAlC;AAA+CC,MAAAA,QAAQ,EAAG;AAA1D,KAA9D,CAIK;AAAA,SAHbC,MAGa,GAHJ,EAGI;AACXT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEDU,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,SAAKN,MAAL,CAAYO,IAAZ,CAAiBD,IAAjB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAAG;AACnB;AACA;AACA;AACA,UAAMC,OAAO,GAAG,IAAIb,cAAJ,CAAmB,IAAnB,CAAhB;AAEA,WAAOa,OAAP;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB;AACA,UAAMC,eAAe,GAAG,IAAId,eAAJ,CAAoB,IAApB,CAAxB;AACA,SAAKe,WAAL,GAAmB,EAAnB;AACA,WAAOD,eAAP;AACH;;AAIDE,EAAAA,QAAQ,CAACP,IAAD,EAAOQ,IAAP,EAAa;AAAE;AACnB;AACAR,IAAAA,IAAI,CAACS,KAAL,GAAaD,IAAb;AACA,SAAKV,MAAL,CAAYG,IAAZ,CAAiBD,IAAjB;AACA,SAAKU,cAAL,CAAoBV,IAApB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,MAAjB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,MAAjB;AACH;;AAEDY,EAAAA,cAAc,CAACV,IAAD,EAAO;AACjB,SAAKN,MAAL,CAAYmB,OAAZ,CAAqBC,OAAD,IAAa;AAAE,UAAGA,OAAO,CAACnB,WAAR,IAAuBK,IAAI,CAACL,WAA/B,EAA4C;AAC3EmB,QAAAA,OAAO,CAACjB,QAAR,GAAmBiB,OAAO,CAACjB,QAAR,GAAmBG,IAAI,CAACH,QAA3C;AACH;AAAE,KAFH;AAGH;;AA7CY;;AAiDjB,eAAeL,UAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport Nifty50Options from \"./Nifty50\";\r\nimport NiftyDerivative from '../StoreMangement/NiftyDerivatives'\r\n\r\nclass StockStore { // this is our domain store which have the main core interaction either with api or any other \r\n    // transport layer. this class should be testable and can also run on backend and can be resused on any other frontend as well\r\n     stocks = [{nameOfStock : \"INFY\" , index : \"Nifty50\", quantity : 1500}, {nameOfStock : \"United\" , index : \"Nifty200\" , quantity : 336}]\r\n      buyers = []\r\n      \r\n    \r\n     constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n    \r\n    addStock(data) {\r\n        this.stocks.push(data)\r\n    }\r\n\r\n    buyNifty50Options() {  // by this method we create a domain object which can be passed over th whole application intead of \r\n        // of our original store. Here Nifty50Options is the domain object(which is a class) it has it own methods and properties.\r\n        // But we can isolate a partiular context of the main store. Instead of putting whole logic in the store itself. Here we are \r\n        // returning an object nifty50 which can be passed to a component to which it can be used.\r\n        const nifty50 = new Nifty50Options(this)\r\n        \r\n        return nifty50\r\n    }\r\n    \r\n    buyNiftyDerivative() { \r\n        //same as the above methods.\r\n        const niftyDerivative = new NiftyDerivative(this)\r\n        this.buyHandlers = []\r\n        return niftyDerivative;\r\n    }\r\n\r\n\r\n\r\n    buyStock(data, name) { //this is the one of the core method of the store which is called by domain objects to interact with api,\r\n        // transport lay or update any local observable related to stock domain in our case\r\n        data.buyer = name \r\n        this.buyers.push(data)\r\n        this.changeQuantity(data)\r\n        console.log(this.stocks)\r\n        console.log(this.buyers)\r\n    }\r\n\r\n    changeQuantity(data) {\r\n        this.stocks.forEach((objData) => { if(objData.nameOfStock == data.nameOfStock) { \r\n            objData.quantity = objData.quantity - data.quantity\r\n        } })\r\n    }\r\n\r\n}\r\n\r\nexport default StockStore;"]},"metadata":{},"sourceType":"module"}